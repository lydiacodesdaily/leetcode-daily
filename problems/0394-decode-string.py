# LeetCode 394 - Decode String
# https://leetcode.com/problems/decode-string/

# âœ… Problem:
# Given an encoded string, return its decoded version.
# Rules: k[encoded_string] means repeat encoded_string k times.
# Nested encodings like "3[a2[c]]" are allowed.

# ğŸ“š Pattern: Stack
# ğŸ§© Subtype: Bracketed Nested Repetition Parsing

# ğŸ§  Memory Hook:
# - Use (prev_str, repeat) stack snapshot on '['
# - On ']', repeat current string and append to prev
# - Multi-digit repeat counts â†’ curr_num = curr_num * 10 + int(char)

# âœ… Time Complexity: O(n)
# âœ… Space Complexity: O(n) for stack and intermediate strings

class Solution:
    def decodeString(self, s: str) -> str:
        stack = []        # ğŸ§³ stack holds (prev_str, repeat_count)
        curr_str = ""     # ğŸ§± current working string being built
        curr_num = 0      # ğŸ”¢ repeat count accumulator

        # ğŸš¶ Step through each character
        for char in s:
            if char.isdigit():
                # ğŸ”¢ Build multi-digit numbers (e.g., "12[ab]")
                curr_num = curr_num * 10 + int(char)

            elif char == '[':
                # ğŸ§³ Push current string and repeat count to stack
                stack.append((curr_str, curr_num))
                # ğŸ§¼ Reset for substring inside brackets
                curr_str = ""
                curr_num = 0

            elif char == ']':
                # ğŸ“¤ Pop last state and apply repeat logic
                prev_str, repeat = stack.pop()
                # ğŸ§± Append repeated current block to previous
                curr_str = prev_str + curr_str * repeat

            else:
                # ğŸ”¤ Append character to current working string
                curr_str += char

        return curr_str


# ğŸ”„ Dry Run: Input â†’ "3[a2[c]]"
# Step-by-step:
# â†’ char='3' â†’ curr_num = 3
# â†’ char='[' â†’ push ("", 3), reset curr_str
# â†’ char='a' â†’ curr_str = "a"
# â†’ char='2' â†’ curr_num = 2
# â†’ char='[' â†’ push ("a", 2), reset curr_str
# â†’ char='c' â†’ curr_str = "c"
# â†’ char=']' â†’ pop â†’ prev="a", num=2 â†’ curr_str = "a" + "c"*2 = "acc"
# â†’ char=']' â†’ pop â†’ prev="", num=3 â†’ curr_str = "" + "acc"*3 = "accaccacc"
# âœ… Output: "accaccacc"