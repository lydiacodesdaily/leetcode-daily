# LeetCode 1 - Two Sum
# https://leetcode.com/problems/two-sum/

# âœ… Problem:
# Given an array of integers `nums` and an integer `target`,
# return indices of the two numbers such that they add up to `target`.

# You may assume that each input has exactly one solution,
# and you may not use the same element twice.

# ðŸ§  Memory Hook:
# for each num â†’ check if (target - num) is in map
# if found â†’ return [map[complement], i]
# else â†’ store num:index in map

# âœ… Time Complexity: O(n)
# âœ… Space Complexity: O(n)

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        seen = {}  # maps value â†’ index

        for i, num in enumerate(nums):
            complement = target - num
            if complement in seen:
                return [seen[complement], i]
            seen[num] = i

"""
nums = [2, 7, 11, 15], target = 9

i = 0 â†’ num = 2 â†’ complement = 7 â†’ not in map â†’ store 2:0
i = 1 â†’ num = 7 â†’ complement = 2 â†’ âœ… found in map
â†’ return [0, 1]
"""